import scala.util.Random

/**
 * Created by alvaro on 21/07/15.
 */
object Edificios extends App{

  import Math.pow

  case class Altura( altura: Int )

  implicit def alturaAInt( a: Altura ) = a.altura

  def probabilidadDeQueSeanDelMismoColor( edificios: Int ) = 1.0/pow(2,edificios-1)

  def probabilidadDeVerLosDosColores( edificios: Int ) = 1 - probabilidadDeQueSeanDelMismoColor(edificios)

  def alturaAleatoria( implicit max: Altura ) = Random.nextInt(max)+1

  def alturasAleatorias(implicit max: Altura ) = Iterator.continually(alturaAleatoria(max))

  def contarEdificiosHastaQueLaAlturaSeaMayorQue( alturaInicial: Int)(implicit alturaMaxima: Altura  ) = {
    alturasAleatorias.indexWhere( _ >= alturaInicial ) + 1
  }

  def unExperimento( implicit alturaMaxima: Altura ) : Double = {
    val alturaEdificioPropio = alturaAleatoria

    if( alturaEdificioPropio == alturaMaxima.altura ){
      // SI ES LA ALTURA MAXIMA, SEGURO QUE VEMOS TODOS LOS INFINITOS EDIFICIOS
      return 1.0
    }

    val visiblesPorLaDerecha = contarEdificiosHastaQueLaAlturaSeaMayorQue(alturaEdificioPropio)
    val visiblesPorLaIzquierda = contarEdificiosHastaQueLaAlturaSeaMayorQue(alturaEdificioPropio)

    probabilidadDeVerLosDosColores(visiblesPorLaDerecha + 1 + visiblesPorLaIzquierda)
  }

  def experimento( veces: Int)(implicit alturaMaxima: Altura ) = {
    (1 to veces ).map( _ => unExperimento ).sum  / veces
  }


  val veces = 1000000
  for( a <- 1 to 200 ) {
    print( s"$a\t${experimento(veces)(Altura(a))}\n" )
  }

  /*
  1	1.0
2	0.8749875
3	0.863479939907074
4	0.8638176342228651
5	0.8660805881971522
6	0.8683757980646876
7	0.8703443029744098
8	0.8718301981159278
9	0.8730791698560054
10	0.8744827394932103
11	0.8755240281191209
12	0.8761985806139321
13	0.8768960815849589
14	0.8776359315296145
15	0.8783097255358316
16	0.8784322847982206
17	0.8792253013667741
18	0.8796955266496588
19	0.8797837224694837
20	0.8802034417478188
21	0.880268053631424
22	0.8806412497443149
23	0.8808201638827007
24	0.88094448694249
25	0.8816332243816245
26	0.8816443825861202
27	0.8814722405970015
28	0.8818517659349582
29	0.8819976855077976
30	0.8821218142254565
31	0.8823117435425198
32	0.882497705772515
33	0.8825519545026821
34	0.8826451708917487
35	0.8826329781972714
36	0.8828951491589196
37	0.8830895837609481
38	0.8831860310882536
39	0.8830626120378986
40	0.8832339902130496
41	0.8831998021635653
42	0.8833990352639274
43	0.88342838114876
44	0.8834320271246903
45	0.8836683543050005
46	0.8835937244536888
47	0.8835806913278366
48	0.8837717014869637
49	0.8837719210413785
50	0.8838177145032327
51	0.8839478658780886
52	0.8841161772146875
53	0.8840381069412345
54	0.884002004160506
55	0.8838602926471952
56	0.8839343357093706
57	0.8841128580620594
58	0.884374288269791
59	0.8842342466418042
60	0.8843373282814762
61	0.8843519660219745
62	0.8842253341262959
63	0.884362091666471
64	0.8842117330606161
65	0.8843868816948266
66	0.8841076132227084
67	0.8844329526620114
68	0.8844117308984393
69	0.8845808898683807
70	0.8845600692758457
71	0.8846965796356374
72	0.8846410405791951
73	0.8848492825163732
74	0.88454628271575
75	0.8844954872385804
76	0.8847778900622871
77	0.8847657454527892
78	0.884644685477224
79	0.8847826153910208
80	0.884872932733263
81	0.8847420913890209
82	0.8848614396783661
83	0.884820944513401
84	0.8848401425085245
85	0.8846313379962669
86	0.8846865730102828
87	0.8849135407749796
88	0.8848710490278882
89	0.8850207734956108
90	0.884794024375359
91	0.8850630093774703
92	0.8848563156210009
93	0.8848846319508066
94	0.8848832012030259
95	0.8849823038698185
96	0.8851038644566825
97	0.8849751836973607
98	0.8850538329687547
99	0.8849348395379314
100	0.8849562385918524
101	0.8850328311894355
102	0.8850079220459948
103	0.8850882980480944
104	0.8851367927549209
105	0.8849895146102381
106	0.885008329897642
107	0.8849949596398223
108	0.8849964734852612
109	0.8851139377916671
110	0.8848001705913169
111	0.885077193535937
112	0.8850683856730127
113	0.8851673502048651
114	0.8852665338767355
115	0.8852661537583703
116	0.8851809471388643
117	0.8852206201328544
118	0.8850462952197203
119	0.8850367441730653
120	0.8853051875161004
121	0.8853129980216036
122	0.8853352882770337
123	0.8854449487324739
124	0.8852397465978696
125	0.8852461711891763
126	0.8851637440519519
127	0.8852460127598147
128	0.8850657250894027
129	0.8853660483222138
130	0.8853430176161667
131	0.8853887726845541
132	0.8852611164553069
133	0.8854195547763604
134	0.8853124379773766
135	0.8852593663222745
136	0.8852969075751066
137	0.885264098971678
138	0.8853773617125777
139	0.885426312797835
140	0.8851156801958476
141	0.8854773274283565
142	0.8854364870943436
143	0.885397898938888
144	0.8854286343794979
145	0.8856054338897591
146	0.8852119088534909
147	0.8854332760155771
148	0.8853443880196937
149	0.8855500415959854
150	0.8854154619632871
151	0.8856085333179565
152	0.8856497875640352
153	0.8855127305618681
154	0.885318758057916
155	0.8854561223925724
156	0.8855412851890071
157	0.8853807167028973
158	0.8854175103856347
159	0.8854931306687307
160	0.8855100533207345
161	0.8853116821637178
162	0.885549762434588
163	0.8853576102816627
164	0.8854490627719853
165	0.885513092998558
166	0.8855140174319333
167	0.8855316120834656
168	0.8856156567448811
169	0.8856116711970543
170	0.8856371182831249
171	0.8855847832992073
172	0.8857075223206045
173	0.8856463960209372
174	0.8856772604421831
175	0.8854769795331061
176	0.885508745529308
177	0.8856562833152904
178	0.8856552760596897
179	0.8854798091172166
180	0.8856798404343978
181	0.8855852431103168
182	0.8857968952153288
183	0.8856758548320444
184	0.8853154247391911
185	0.8858155261023684
186	0.8854451376967651
187	0.8857571105544623
188	0.8855832464575085
189	0.8856517103498291
190	0.885766409755423
191	0.8858522361167848
192	0.8856627369809964
193	0.8855099593807485
194	0.8857611250454808
195	0.8855668120637157
196	0.8857584269374668
197	0.8854287728499081
198	0.8858592362435052
199	0.8856716715835468
200	0.885442710725863

   */
}
